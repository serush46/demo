name: C# Pipeline with Tests

on:
  push:
    branches:
      - main
  workflow_dispatch:
  workflow_run:
    workflows: ["Common Workflow"]
    types:
        - completed

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Verify .NET Installation
        run: dotnet --info

      - name: Restore Dependencies (All Projects)
        run: |
            # dotnet restore
            dotnet restore SampleApp/src/SampleApp.csproj

      - name: Build Application
        run: dotnet build SampleApp/src/SampleApp.csproj --configuration Release

    #   - name: Run Unit Tests
    #     run: dotnet test SampleApp/tests/SampleApp.Tests.csproj --configuration Release --logger "trx;LogFileName=unit_test_results.trx"

      - name: Run Integration Tests
        run: dotnet test SampleApp/tests/SampleApp.Tests.csproj --filter Category=Integration --configuration Release --logger "trx;LogFileName=integration_test_results.trx"

      - name: Run End-to-End Tests
        run: dotnet test SampleApp/tests/SampleApp.Tests.csproj --filter Category=E2E --configuration Release --logger "trx;LogFileName=e2e_test_results.trx"

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            unit_test_results.trx
            integration_test_results.trx
            e2e_test_results.trx

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:~/.dotnet/tools"
        #   dotnet sonarscanner begin /k:"sample-app" /d:sonar.host.url="http://<sonarqube-url>" /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        #   dotnet build src/SampleApp.csproj
        #   dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Build and Push Docker Images
        env:
          DOCKERHUB_USERNAME: arunmrp90
          DOCKERHUB_PASSWORD: "arunmrP@90"
        run: |
          # Extract short SHA and build number
          SHORT_SHA=$(echo "${GITHUB_SHA}" | head -c 7)
          BUILD_NUMBER="${{ github.run_number }}"

          # Docker tags
          IMAGE_NAME="arunmrp90/sample-app"
          TAG_SHA_BUILD="${IMAGE_NAME}:${SHORT_SHA}-${BUILD_NUMBER}"
          TAG_BUILD="${IMAGE_NAME}:${BUILD_NUMBER}"
          TAG_LATEST="${IMAGE_NAME}:latest"

          # Build Docker image
          docker build -t "$TAG_SHA_BUILD" -t "$TAG_BUILD" -t "$TAG_LATEST" SampleApp/

          # Push images to DockerHub
          echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          docker push "$TAG_SHA_BUILD"
          docker push "$TAG_BUILD"
          docker push "$TAG_LATEST"

      - name: Trivy Scan
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image -f json -o trivy.json arunmrp90/sample-app:latest

      - name: Generate Trivy HTML Report
        run: |
          python3 scripts/trivy_to_html.py
        env:
          TRIVY_JSON: trivy.json
          REPORT_HTML: trivy_report.html

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy_report.html
