name: Helm Nginx Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write  # This will allow the bot to push tags
  id-token: write  # This can be helpful for accessing additional tokens if needed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Pull Nginx Image
        run: |
          docker pull nginx:latest
          docker save nginx:latest -o nginx.tar

      - name: Scan Nginx Image with Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image -f json -o trivy.json nginx:latest

      - name: Generate Trivy HTML Report
        run: |
          python3 scripts/trivy_to_html.py
        env:
          TRIVY_JSON: trivy.json
          REPORT_HTML: trivy_report.html

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy_report.html

      - name: Lint Helm Chart
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm lint ./helm/hello-world

      - name: Validate and Package Helm Chart
        id: package_helm
        run: |
            helm template ./helm/hello-world
            helm package ./helm/hello-world --version "0.1.${{ github.run_number }}"
            ls -1 *.tgz | sed -n 's/\.tgz$//p' > chart_version.txt
    
      - name: Set Up Kind Cluster
        run: |
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind
            kind create cluster --name test-cluster
            echo "Waiting for Kind to be ready..."
            kubectl wait --for=condition=Ready nodes --all --timeout=300s
        
      - name: Deploy Helm Chart to Kind
        run: |
            CHART_VERSION="0.1.${{ github.run_number }}"
            helm install hello-world "./hello-world-${CHART_VERSION}.tgz" --namespace test --create-namespace

      - name: Set up Git config
        run: |
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Create Release Tag
        run: |
            VERSION="0.1.${{ github.run_number }}"
            git tag -a v$VERSION -m "Release v$VERSION"
            git push origin v$VERSION
    #   - name: Create Release Tag
    #     id: create_tag
    #     run: |
    #       VERSION=$(date +'%Y%m%d%H%M%S')
    #       git config --global user.name "github-actions[bot]"
    #       git config --global user.email "github-actions[bot]@users.noreply.github.com"
    #       git tag -a v$VERSION -m "Release v$VERSION"
    #       git push origin v$VERSION
    #       echo "tag=$VERSION" >> $GITHUB_ENV

      - name: Generate status.json
        run: |
            echo '{"steps": [' > status.json
            echo '{"name": "Checkout repository", "status": "${{ steps.checkout.outcome }}"},' >> status.json
            echo '{"name": "Install dependencies", "status": "${{ steps.install_dependencies.outcome }}"},' >> status.json
            echo '{"name": "Run tests", "status": "${{ steps.run_tests.outcome }}"}' >> status.json
            echo ']}' >> status.json
            id: generate_status

      - name: Generate HTML Report for Steps
        run: |
          python3 scripts/pipeline_to_html.py
        env:
          STATUS_FILE: status.json
          HTML_REPORT: pipeline_report.html

      - name: Upload Pipeline Report
        uses: actions/upload-artifact@v3
        with:
          name: pipeline-report
          path: pipeline_report.html
