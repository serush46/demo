name: Helm Nginx Pipeline

on:
  push:
    # branches:
    #   - main
  workflow_dispatch:
  workflow_run:
    workflows: ["Common Workflow"]
    types:
        - completed

permissions:
  contents: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v3

      - name: Pull Nginx Image
        id: pull_nginx
        run: |
          docker pull nginx:latest
          docker save nginx:latest -o nginx.tar

      - name: Scan Nginx Image with Trivy
        id: scan_trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image -f json -o trivy.json nginx:latest

      - name: Generate Trivy HTML Report
        id: generate_trivy_report
        run: |
          python3 scripts/trivy_to_html.py
        env:
          TRIVY_JSON: trivy.json
          REPORT_HTML: trivy_report.html

      - name: Upload Trivy Report
        id: upload_trivy_report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy_report.html

      - name: Lint Helm Chart
        id: lint_helm_chart
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm lint ./helm/hello-world

      - name: Validate and Package Helm Chart
        id: validate_package_helm
        run: |
            helm template ./helm/hello-world
            helm package ./helm/hello-world --version "0.1.${{ github.run_number }}"
            ls -1 *.tgz | sed -n 's/\.tgz$//p' > chart_version.txt
    
      - name: Set Up Kind Cluster
        id: setup_kind
        run: |
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind
            kind create cluster --name test-cluster
            echo "Waiting for Kind to be ready..."
            kubectl wait --for=condition=Ready nodes --all --timeout=300s
        
      - name: Deploy Helm Chart to Kind
        id: deploy_helm_to_kind
        run: |
            CHART_VERSION="0.1.${{ github.run_number }}"
            helm install hello-world "./hello-world-${CHART_VERSION}.tgz" --namespace test --create-namespace

      - name: Set up Git config
        id: setup_git
        run: |
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Create Release Tag
        id: create_release_tag
        run: |
            VERSION="0.1.${{ github.run_number }}"
            git tag -a v$VERSION -m "Release v$VERSION"
            git push origin v$VERSION

      - name: Sync with ArgoCD
        id: argocd_sync
        run: |
            curl -LO https://github.com/argoproj/argo-cd/releases/download/v2.7.0/argocd-linux-amd64
            chmod +x argocd-linux-amd64
            sudo mv argocd-linux-amd64 /usr/local/bin/argocd

            # Log in to ArgoCD
            argocd login 3.109.200.171:30080 \
            --username admin \
            --password aAWEbr5FQ1RxBLWP \
            --insecure

            # Ensure the application is created (first-time deployment)
            argocd app create helloworld \
                --repo https://github.com/${{ github.repository }} \
                --path helm/hello-world \
                --dest-server https://kubernetes.default.svc \
                --dest-namespace default \
                --helm-set chart.version="0.1.${{ github.run_number }}" \
                --insecure || true

            # Set the Helm chart version (for updates or overrides)
            CHART_VERSION="0.1.${{ github.run_number }}"
            argocd app set helloworld \
                --helm-set chart.version="$CHART_VERSION" --insecure

            # Sync the application
            argocd app sync helloworld --insecure
    
      - name: Generate status.json
        if: always()
        id: generate_status
        run: |
            echo '{"steps": [' > status.json
            echo '{"name": "Checkout Repository", "status": "${{ steps.checkout.outcome }}"},' >> status.json
            echo '{"name": "Pull Nginx Image", "status": "${{ steps.pull_nginx.outcome }}"},' >> status.json
            echo '{"name": "Scan Nginx Image with Trivy", "status": "${{ steps.scan_trivy.outcome }}"},' >> status.json
            echo '{"name": "Generate Trivy HTML Report", "status": "${{ steps.generate_trivy_report.outcome }}"},' >> status.json
            echo '{"name": "Upload Trivy Report", "status": "${{ steps.upload_trivy_report.outcome }}"},' >> status.json
            echo '{"name": "Lint Helm Chart", "status": "${{ steps.lint_helm_chart.outcome }}"},' >> status.json
            echo '{"name": "Validate and Package Helm Chart", "status": "${{ steps.validate_package_helm.outcome }}"},' >> status.json
            echo '{"name": "Set Up Kind Cluster", "status": "${{ steps.setup_kind.outcome }}"},' >> status.json
            echo '{"name": "Deploy Helm Chart to Kind", "status": "${{ steps.deploy_helm_to_kind.outcome }}"},' >> status.json
            echo '{"name": "Set up Git config", "status": "${{ steps.setup_git.outcome }}"},' >> status.json
            echo '{"name": "Create Release Tag", "status": "${{ steps.create_release_tag.outcome }}"},' >> status.json
            echo '{"name": "Sync with ArgoCD", "status": "${{ steps.argocd_sync.outcome }}"}' >> status.json
            echo ']}' >> status.json

      - name: Generate HTML Report for Steps
        if: always()
        run: |
          python3 scripts/pipeline_to_html.py
        env:
          STATUS_FILE: status.json
          HTML_REPORT: pipeline_report.html

      - name: Upload Pipeline Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: pipeline-report
          path: pipeline_report.html
